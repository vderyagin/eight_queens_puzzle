// Generated by CoffeeScript 1.6.3
(function() {
  var Solution, findSolution, solve;

  Solution = (function() {
    function Solution(pairs) {
      this.pairs = pairs;
    }

    Solution.prototype.correct = function() {
      var notSame, other, others, p, pair, _i, _j, _len, _len1, _ref;
      notSame = function(p1, p2) {
        return !(p1[0] === p2[0] && p1[1] === p2[1]);
      };
      _ref = this.pairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        others = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this.pairs;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (notSame(p, pair)) {
              _results.push(p);
            }
          }
          return _results;
        }).call(this);
        for (_j = 0, _len1 = others.length; _j < _len1; _j++) {
          other = others[_j];
          if (this.clash(pair, other)) {
            return false;
          }
        }
      }
      return true;
    };

    Solution.prototype.clash = function(pair1, pair2) {
      var x1, x2, y1, y2, _ref;
      _ref = [pair1[0], pair2[0], pair1[1], pair2[1]], x1 = _ref[0], x2 = _ref[1], y1 = _ref[2], y2 = _ref[3];
      if (x1 === x2 || y1 === y2) {
        return true;
      }
      if (x1 - y1 === x2 - y2 || x1 + y1 === x2 + y2) {
        return true;
      }
      return false;
    };

    return Solution;

  })();

  findSolution = function(n) {
    var completedRows, i, partialSolution, positions, rowIdx, rowsOrder, y, _i, _results;
    rowsOrder = (function() {
      _results = [];
      for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).sort(function() {
      return 0.5 - Math.random();
    });
    positions = (function() {
      var _j, _results1;
      _results1 = [];
      for (i = _j = 0; 0 <= n ? _j < n : _j > n; i = 0 <= n ? ++_j : --_j) {
        _results1.push([0, i]);
      }
      return _results1;
    })();
    rowIdx = 0;
    while (!(new Solution(positions)).correct()) {
      completedRows = (function() {
        var _j, _results1;
        _results1 = [];
        for (i = _j = 0; 0 <= rowIdx ? _j <= rowIdx : _j >= rowIdx; i = 0 <= rowIdx ? ++_j : --_j) {
          _results1.push(rowsOrder[i]);
        }
        return _results1;
      })();
      partialSolution = (function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = completedRows.length; _j < _len; _j++) {
          y = completedRows[_j];
          _results1.push([positions[y][0], y]);
        }
        return _results1;
      })();
      if ((new Solution(partialSolution)).correct()) {
        rowIdx += 1;
      } else {
        while (positions[rowsOrder[rowIdx]][0] === n - 1) {
          positions[rowsOrder[rowIdx]][0] = 0;
          rowIdx -= 1;
        }
        positions[rowsOrder[rowIdx]][0] += 1;
      }
    }
    return positions;
  };

  solve = function(event) {
    return self.postMessage(findSolution(event.data));
  };

  self.addEventListener('message', solve, false);

}).call(this);

/*
//@ sourceMappingURL=worker.map
*/
