// Generated by CoffeeScript 1.6.2
(function() {
  var ChessBoard, Solution, findSolution, solutionsFor;

  jQuery(function() {
    var board;

    board = new ChessBoard({
      size: 8,
      sizePx: 600,
      canvas: $('#canvas')[0]
    });
    $('#slider').slider({
      min: 4,
      max: 16,
      value: board.size,
      slide: function(_, ui) {
        var size, t, u, _ref;

        $('.ui-slider-handle').tooltip('destroy');
        size = ui.value;
        board.setSize(size);
        $('#size').text("Size: " + size + "Ã—" + size);
        _ref = solutionsFor(size), t = _ref[0], u = _ref[1];
        $('#solutions').text("Solutions: " + t + " total, " + u + " unique");
        return $('#solve').text('Find solution');
      }
    });
    $('#solve').click(function() {
      board.solve();
      return $(this).text('Find another solution');
    });
    $('#solve').tooltip({
      title: 'Press to solve puzzle',
      trigger: 'manual',
      placement: 'left'
    });
    $('.ui-slider-handle').tooltip({
      title: 'Drag to change board size',
      trigger: 'manual',
      placement: 'bottom'
    });
    $('#solve').one('click', function() {
      $(this).tooltip('destroy');
      return $('.ui-slider-handle').tooltip('show');
    });
    return $('#solve').tooltip('show');
  });

  solutionsFor = function(s) {
    return {
      4: ['2', '1'],
      5: ['10', '2'],
      6: ['4', '1'],
      7: ['40', '6'],
      8: ['92', '12'],
      9: ['352', '46'],
      10: ['724', '92'],
      11: ['2,680', '341'],
      12: ['14,200', '1,787'],
      13: ['73,712', '9,233'],
      14: ['365,596', '45,752'],
      15: ['2,279,184', '285,053'],
      16: ['14,772,512', '1,846,955'],
      17: ['95,815,104', '11,977,939'],
      18: ['666,090,624', '83,263,591'],
      19: ['4,968,057,848', '621,012,754'],
      20: ['39,029,188,884', '4,878,666,808'],
      21: ['314,666,222,712', '39,333,324,973'],
      22: ['2,691,008,701,644', '336,376,244,042'],
      23: ['24,233,937,684,440', '3,029,242,658,210'],
      24: ['227,514,171,973,736', '28,439,272,956,934'],
      25: ['2,207,893,435,808,350', '275,986,683,743,434'],
      26: ['22,317,699,616,364,000', '2,789,712,466,510,280']
    }[s];
  };

  ChessBoard = (function() {
    function ChessBoard(opts) {
      var canvas;

      this.sizePx = opts['sizePx'];
      canvas = opts['canvas'];
      canvas.width = this.sizePx;
      canvas.height = this.sizePx;
      this.ctx = canvas.getContext('2d');
      this.setSize(opts['size']);
    }

    ChessBoard.prototype.pos = function(c) {
      return c * this.tileSize;
    };

    ChessBoard.prototype.setSize = function(size) {
      this.size = size;
      this.tileSize = this.sizePx / this.size;
      return this.renderEmpty();
    };

    ChessBoard.prototype.renderTile = function(x, y) {
      var color;

      color = x % 2 !== y % 2 ? '#aaaaaa' : '#eeeeee';
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(this.pos(x), this.pos(y), this.tileSize, this.tileSize);
    };

    ChessBoard.prototype.renderEmpty = function() {
      var x, y, _i, _ref, _results;

      _results = [];
      for (y = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (x = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.renderTile(x, y));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    ChessBoard.prototype.renderQueen = function(x, y) {
      var ctx, img, s, xPos, yPos;

      img = new Image;
      img.src = 'queen.png';
      ctx = this.ctx;
      xPos = this.pos(x);
      yPos = this.pos(y);
      s = this.tileSize;
      return img.onload = function() {
        return ctx.drawImage(img, xPos, yPos, s, s);
      };
    };

    ChessBoard.prototype.solve = function() {
      var solution, x, y, _i, _len, _ref, _results;

      solution = findSolution(this.size);
      this.renderEmpty();
      _results = [];
      for (_i = 0, _len = solution.length; _i < _len; _i++) {
        _ref = solution[_i], x = _ref[0], y = _ref[1];
        _results.push(this.renderQueen(x, y));
      }
      return _results;
    };

    return ChessBoard;

  })();

  Solution = (function() {
    function Solution(pairs) {
      this.pairs = pairs;
    }

    Solution.prototype.correct = function() {
      var notSame, other, others, p, pair, _i, _j, _len, _len1, _ref;

      notSame = function(p1, p2) {
        return !(p1[0] === p2[0] && p1[1] === p2[1]);
      };
      _ref = this.pairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        others = (function() {
          var _j, _len1, _ref1, _results;

          _ref1 = this.pairs;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (notSame(p, pair)) {
              _results.push(p);
            }
          }
          return _results;
        }).call(this);
        for (_j = 0, _len1 = others.length; _j < _len1; _j++) {
          other = others[_j];
          if (this.clash(pair, other)) {
            return false;
          }
        }
      }
      return true;
    };

    Solution.prototype.clash = function(pair1, pair2) {
      var x1, x2, y1, y2, _ref;

      _ref = [pair1[0], pair2[0], pair1[1], pair2[1]], x1 = _ref[0], x2 = _ref[1], y1 = _ref[2], y2 = _ref[3];
      if (x1 === x2 || y1 === y2) {
        return true;
      }
      if (x1 - y1 === x2 - y2 || x1 + y1 === x2 + y2) {
        return true;
      }
      return false;
    };

    return Solution;

  })();

  findSolution = function(n) {
    var completedRows, i, partialSolution, positions, rowIdx, rowsOrder, y, _i, _results;

    rowsOrder = (function() {
      _results = [];
      for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).sort(function() {
      return 0.5 - Math.random();
    });
    positions = (function() {
      var _j, _results1;

      _results1 = [];
      for (i = _j = 0; 0 <= n ? _j < n : _j > n; i = 0 <= n ? ++_j : --_j) {
        _results1.push([0, i]);
      }
      return _results1;
    })();
    rowIdx = 0;
    while (!(new Solution(positions)).correct()) {
      completedRows = (function() {
        var _j, _results1;

        _results1 = [];
        for (i = _j = 0; 0 <= rowIdx ? _j <= rowIdx : _j >= rowIdx; i = 0 <= rowIdx ? ++_j : --_j) {
          _results1.push(rowsOrder[i]);
        }
        return _results1;
      })();
      partialSolution = (function() {
        var _j, _len, _results1;

        _results1 = [];
        for (_j = 0, _len = completedRows.length; _j < _len; _j++) {
          y = completedRows[_j];
          _results1.push([positions[y][0], y]);
        }
        return _results1;
      })();
      if ((new Solution(partialSolution)).correct()) {
        rowIdx += 1;
      } else {
        while (positions[rowsOrder[rowIdx]][0] === n - 1) {
          positions[rowsOrder[rowIdx]][0] = 0;
          rowIdx -= 1;
        }
        positions[rowsOrder[rowIdx]][0] += 1;
      }
    }
    return positions;
  };

}).call(this);

/*
//@ sourceMappingURL=eight_queens.map
*/
